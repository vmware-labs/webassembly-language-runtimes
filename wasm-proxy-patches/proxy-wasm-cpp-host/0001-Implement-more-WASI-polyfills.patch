From be4ad915286e7c6197e6fb2a4ea6ccea0318e840 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Rafael=20Fern=C3=A1ndez=20L=C3=B3pez?=
 <rfernandezl@vmware.com>
Date: Tue, 4 Apr 2023 12:43:23 +0200
Subject: [PATCH] Implement more WASI polyfills

---
 include/proxy-wasm/exports.h | 28 +++++++++++++--
 include/proxy-wasm/wasm_vm.h |  7 +++-
 src/exports.cc               | 68 ++++++++++++++++++++++++++++++++++++
 src/wasm.cc                  |  4 ++-
 src/wasmtime/wasmtime.cc     |  4 +--
 5 files changed, 105 insertions(+), 6 deletions(-)

diff --git a/include/proxy-wasm/exports.h b/include/proxy-wasm/exports.h
index 376a4d3..9f0ce2b 100644
--- a/include/proxy-wasm/exports.h
+++ b/include/proxy-wasm/exports.h
@@ -149,6 +149,25 @@ Word wasi_unstable_random_get(Word, Word);
 Word pthread_equal(Word left, Word right);
 void emscripten_notify_memory_growth(Word);
 
+// ereslibre: support running interpreted languages
+Word wasi_unstable_fd_datasync(Word);
+Word wasi_unstable_fd_fdstat_set_flags(Word, Word);
+Word wasi_unstable_fd_filestat_get(Word, Word);
+Word wasi_unstable_fd_filestat_set_size(Word, uint64_t);
+Word wasi_unstable_fd_readdir(Word, Word, Word, int64_t, Word);
+Word wasi_unstable_fd_sync(Word);
+Word wasi_unstable_fd_tell(Word, Word);
+Word wasi_unstable_path_create_directory(Word, Word, Word);
+Word wasi_unstable_path_filestat_get(Word, Word, Word, Word, Word);
+Word wasi_unstable_path_filestat_set_times(Word, Word, Word, Word, int64_t, int64_t, Word);
+Word wasi_unstable_path_link(Word, Word, Word, Word, Word, Word, Word);
+Word wasi_unstable_path_readlink(Word, Word, Word, Word, Word, Word);
+Word wasi_unstable_path_remove_directory(Word, Word, Word);
+Word wasi_unstable_path_rename(Word, Word, Word, Word, Word, Word);
+Word wasi_unstable_path_symlink(Word, Word, Word, Word, Word);
+Word wasi_unstable_path_unlink_file(Word, Word, Word);
+Word wasi_unstable_poll_oneoff(Word, Word, Word, Word);
+
 // Support for embedders, not exported to Wasm.
 
 #define FOR_ALL_HOST_FUNCTIONS(_f)                                                                 \
@@ -171,8 +190,13 @@ void emscripten_notify_memory_growth(Word);
 
 #define FOR_ALL_WASI_FUNCTIONS(_f)                                                                 \
   _f(fd_write) _f(fd_read) _f(fd_seek) _f(fd_close) _f(fd_fdstat_get) _f(environ_get)              \
-      _f(environ_sizes_get) _f(args_get) _f(args_sizes_get) _f(clock_time_get) _f(random_get)      \
-          _f(proc_exit) _f(path_open) _f(fd_prestat_get) _f(fd_prestat_dir_name)
+  _f(environ_sizes_get) _f(args_get) _f(args_sizes_get) _f(clock_time_get) _f(random_get)          \
+  _f(fd_datasync) _f(fd_fdstat_set_flags) _f(proc_exit) _f(path_open) _f(fd_prestat_get) _f(fd_prestat_dir_name) \
+  _f(fd_filestat_get) _f(fd_filestat_set_size) _f(fd_readdir) _f(fd_sync) _f(fd_tell)              \
+  _f(path_create_directory) _f(path_filestat_get) _f(path_filestat_set_times) _f(path_link)        \
+  _f(path_readlink) _f(path_remove_directory) _f(path_rename) _f(path_symlink)       \
+  _f(path_unlink_file) _f(poll_oneoff)
+
 
 // Helpers to generate a stub to pass to VM, in place of a restricted proxy-wasm capability.
 #define _CREATE_PROXY_WASM_STUB(_fn)                                                               \
diff --git a/include/proxy-wasm/wasm_vm.h b/include/proxy-wasm/wasm_vm.h
index acf0ccf..c0bf3da 100644
--- a/include/proxy-wasm/wasm_vm.h
+++ b/include/proxy-wasm/wasm_vm.h
@@ -111,8 +111,11 @@ using WasmCallback_WWl = Word (*)(Word, int64_t);
 using WasmCallback_WWlWW = Word (*)(Word, int64_t, Word, Word);
 using WasmCallback_WWm = Word (*)(Word, uint64_t);
 using WasmCallback_WWmW = Word (*)(Word, uint64_t, Word);
+using WasmCallback_WWWWlW = Word (*)(Word, Word, Word, int64_t, Word);
+using WasmCallback_WWWWWllW = Word (*)(Word, Word, Word, Word, int64_t, int64_t, Word);
 using WasmCallback_WWWWWWllWW = Word (*)(Word, Word, Word, Word, Word, int64_t, int64_t, Word,
                                          Word);
+
 using WasmCallback_dd = double (*)(double);
 
 #define FOR_ALL_WASM_VM_IMPORTS(_f)                                                                \
@@ -130,7 +133,9 @@ using WasmCallback_dd = double (*)(double);
                                               _f(proxy_wasm::WasmCallback_WWlWW)                   \
                                                   _f(proxy_wasm::WasmCallback_WWm)                 \
                                                       _f(proxy_wasm::WasmCallback_WWmW)            \
-                                                          _f(proxy_wasm::WasmCallback_WWWWWWllWW)  \
+                                                        _f(proxy_wasm::WasmCallback_WWWWlW)        \
+                                                          _f(proxy_wasm::WasmCallback_WWWWWllW)  \
+                                                            _f(proxy_wasm::WasmCallback_WWWWWWllWW)  \
                                                               _f(proxy_wasm::WasmCallback_dd)
 
 enum class Cloneable {
diff --git a/src/exports.cc b/src/exports.cc
index 0290dcf..b3436e1 100644
--- a/src/exports.cc
+++ b/src/exports.cc
@@ -879,6 +879,74 @@ Word wasi_unstable_random_get(Word result_buf_ptr, Word buf_len) {
   return 0; // __WASI_ESUCCESS
 }
 
+Word wasi_unstable_fd_datasync(Word fd) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_fdstat_set_flags(Word fd, Word flags) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_filestat_get(Word fd, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_filestat_set_size(Word fd, uint64_t size) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_readdir(Word, Word, Word, int64_t, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_sync(Word fd) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_fd_tell(Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_create_directory(Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_filestat_get(Word, Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_filestat_set_times(Word, Word, Word, Word, int64_t, int64_t, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_link(Word, Word, Word, Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_readlink(Word, Word, Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_remove_directory(Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_rename(Word, Word, Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_symlink(Word, Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_path_unlink_file(Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
+Word wasi_unstable_poll_oneoff(Word, Word, Word, Word) {
+  return 0; // __WASI_ESUCCESS
+}
+
 // void __wasi_proc_exit(__wasi_exitcode_t rval);
 void wasi_unstable_proc_exit(Word /*exit_code*/) {
   auto *context = contextOrEffectiveContext();
diff --git a/src/wasm.cc b/src/wasm.cc
index 5519b3e..d781135 100644
--- a/src/wasm.cc
+++ b/src/wasm.cc
@@ -373,7 +373,9 @@ void WasmBase::startVm(ContextBase *root_context) {
              // time
              "wasi_unstable.clock_time_get", "wasi_snapshot_preview1.clock_time_get",
              // random
-             "wasi_unstable.random_get", "wasi_snapshot_preview1.random_get"});
+             "wasi_unstable.random_get", "wasi_snapshot_preview1.random_get",
+             // additional WIP
+             "wasi_unstable.fd_datasync", "wasi_snapshot_preview1.fd_datasync"});
   if (_initialize_) {
     // WASI reactor.
     _initialize_(root_context);
diff --git a/src/wasmtime/wasmtime.cc b/src/wasmtime/wasmtime.cc
index 2cfc218..e697e9f 100644
--- a/src/wasmtime/wasmtime.cc
+++ b/src/wasmtime/wasmtime.cc
@@ -260,7 +260,7 @@ bool Wasmtime::link(std::string_view /*debug_name*/) {
       auto it = host_functions_.find(std::string(module_name) + "." + std::string(name));
       if (it == host_functions_.end()) {
         fail(FailState::UnableToInitializeCode,
-             std::string("Failed to load Wasm module due to a missing import: ") +
+             std::string("Failed to load Wasm module due to a missing import (extern func): ") +
                  std::string(module_name) + "." + std::string(name));
         return false;
       }
@@ -286,7 +286,7 @@ bool Wasmtime::link(std::string_view /*debug_name*/) {
     case WASM_EXTERN_GLOBAL: {
       // TODO(mathetake): add support when/if needed.
       fail(FailState::UnableToInitializeCode,
-           "Failed to load Wasm module due to a missing import: " + std::string(module_name) + "." +
+           "Failed to load Wasm module due to a missing import (extern global): " + std::string(module_name) + "." +
                std::string(name));
       return false;
     } break;
-- 
2.38.4

